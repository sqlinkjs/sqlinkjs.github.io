"use strict";(self.webpackChunksqlinkjs_github_io=self.webpackChunksqlinkjs_github_io||[]).push([[848],{4756:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tutorial-advanced/upsert-query","title":"Upserting Data","description":"An upsert operation is a database action that combines the functionalities of both update and insert.","source":"@site/docs/tutorial-advanced/upsert-query.md","sourceDirName":"tutorial-advanced","slug":"/tutorial-advanced/upsert-query","permalink":"/docs/tutorial-advanced/upsert-query","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Procedures","permalink":"/docs/tutorial-advanced/procedures"},"next":{"title":"Hosting Files","permalink":"/docs/hosting"}}');var i=s(4848),r=s(8453);const o={sidebar_position:3},a="Upserting Data",l={},c=[{value:"Endpoint",id:"endpoint",level:2},{value:"Example",id:"example",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"upserting-data",children:"Upserting Data"})}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"upsert operation"})," is a database action that combines the functionalities of both ",(0,i.jsx)(n.strong,{children:"update"})," and ",(0,i.jsx)(n.strong,{children:"insert"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If the record (identified by a unique key or primary key) ",(0,i.jsx)(n.strong,{children:"already exists"}),", the operation ",(0,i.jsx)(n.strong,{children:"updates"})," it with the new data."]}),"\n",(0,i.jsxs)(n.li,{children:["If the record ",(0,i.jsx)(n.strong,{children:"does not exist"}),", the operation ",(0,i.jsx)(n.strong,{children:"inserts"})," a new record into the database."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This makes upserts useful for scenarios where you want to ensure a record exists with the latest data without manually checking first."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"endpoint",children:"Endpoint"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"URL"}),": ",(0,i.jsx)(n.code,{children:"http://localhost:PORT/table/TABLE_NAME/upsert(id,value)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Method"}),": ",(0,i.jsx)(n.code,{children:"POST"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response"}),": ",(0,i.jsx)(n.code,{children:"200 OK"})," (on success)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Request"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:"POST http://localhost:3000/table/users/upsert(userid,10)\nContent-Type: application/json\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Payload"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "username": "John Doe",\n  "useremail": "johndoe@email.com",\n  "city": "Bangalore"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Response"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "message": "Upsert operation completed"\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"Important Notes:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensure the ",(0,i.jsx)(n.code,{children:"id"})," column used in the URL is a ",(0,i.jsx)(n.strong,{children:"unique identifier"})," (typically a primary key)."]}),"\n",(0,i.jsx)(n.li,{children:"Ensure the id column used in the URL is a unique identifier (typically a primary key)."}),"\n",(0,i.jsxs)(n.li,{children:["If constraints exist (e.g., ",(0,i.jsx)(n.code,{children:"NOT NULL"}),", ",(0,i.jsx)(n.code,{children:"UNIQUE"}),"), the payload must satisfy them to avoid errors."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use upserts when syncing data or handling ",(0,i.jsx)(n.strong,{children:"idempotent operations"})," (safe to retry without creating duplicates)."]}),"\n",(0,i.jsx)(n.li,{children:"Always validate payloads before sending them to SQLink."}),"\n",(0,i.jsx)(n.li,{children:"Combine with authentication to ensure only authorized users can perform upserts."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);